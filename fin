create table warehouse(warehouse_id number(5) constraint pk_i_id primary key,warehouse_loc varchar2(20) constraint nn_i_loc not null);

create table mall(mall_id number(5) constraint pk_m_id primary key,mall_loc varchar2(20) constraint nn_m_loc not null);

create table item(item_id number(5) constraint pk_it_id primary key, it_name varchar2(20) not null,measuring_unit varchar2(20),price number(10),expiry_dt date,constraint ck_m_u check(upper(measuring_unit) in ('TONNES','KILOGRAMS','GRAMS','LITRES','NUMBER')));

create table supplier(s_id number(5) constraint pk_s_id primary key,s_name varchar2(20),s_loc varchar2(20) not null,contact_no number(10) constraint ck_c_no check(length(contact_no)=10));

create table warehouse_items(warehouse_id number(5) constraint fk_i_id_2 references warehouse(warehouse_id),item_id number(5) constraint fk_it_id_1 references item(item_id),available_qty number(10),reorder_level number(10),constraint pk_i_it primary key(warehouse_id,item_id));

create table mall_items(mall_id number(5) constraint fl_m_id_2 references mall(mall_id),item_id number(5) constraint fk_it_id_2 references item(item_id),available_qty number(10),reorder_level number(10),constraint pk_m_it primary key(mall_id,item_id));

create table warehouse_supplier_details(warehouse_id number(5) constraint fk_i_id_3 references warehouse(warehouse_id),item_id number(5) constraint fk_it_id_3 references item(item_id),s_id number(5) constraint fk_s_id_1 references supplier(s_id),constraint pk_i_s primary key(warehouse_id,item_id,s_id));

create table warehouse_bills(bill_id number(5) constraint pk_bill_id primary key,warehouse_id number(5),s_id number(5),item_id number(5),order_qty number(10),order_dt date,tot_price number(10),bill_status varchar2(20) constraint ck_b_s check(upper(bill_status) in ('PAID','UNPAID')),constraint fk_in_s_it foreign key(warehouse_id,s_id,item_id) references warehouse_supplier_details(warehouse_id,s_id,item_id));

create table mall_supplier_details(mall_id number(5) constraint fl_m_id_1 references mall(mall_id),warehouse_id number(5) constraint fk_i_id_1 references warehouse(warehouse_id),item_id number(5) constraint fk_it_id_4 references item(item_id),constraint pk_m_i_it primary key(mall_id,warehouse_id,item_id));

create table mall_orders(order_id number(5) constraint pk_o_id primary key,order_qty number(10),order_dt date,mall_id number(5),item_id number(5),warehouse_id number(5),constraint fk_m_i_id foreign key(mall_id,warehouse_id,item_id) references mall_supplier_details(mall_id,warehouse_id,item_id));


/cal function/

create or replace function calprice(it item.item_id%type,qty warehouse_bills.order_qty%type) return number
as
a number(5);
begin
select price into a from item where item_id=it;
return a*qty;
exception
when no_data_found then return 0;
end calprice;
/

/checkstock func/

create or replace function checkstock(m mall.mall_id%type,i item.item_id%type,qty_req number) return boolean
as 
a mall_items.available_qty%type;
b boolean;
begin
select available_qty into a from mall_items where mall_id=m and item_id=i;
if a>qty_req then b:=false;
else b:=true;
end if;
return b;
exception
when no_data_found then return false;
end checkstock;
/


/generate mall orders/

create or replace procedure generatemallorder(m mall.mall_id%type,i item.item_id%type)
is
reorder mall_items.reorder_level%type;
o mall_orders.order_id%type;
w warehouse.warehouse_id%type;
begin
select reorder_level into reorder from mall_items where mall_id=m and item_id=i;
select max(order_id) into o from mall_orders;
select warehouse_id into w from mall_supplier_details where mall_id=m and item_id=i;
o:=o+1;
insert into mall_orders values(o,reorder,sysdate,m,i,w);
end generatemallorder;
/

/updatestock/

create or replace procedure updatewarehousestock(w warehouse.warehouse_id%type,i item.item_id%type)
is
r warehouse_items%rowtype;
o warehouse_bills.order_qty%type;
b warehouse_bills.bill_status%type;
begin
select order_qty,bill_status into o,b from warehouse_bills where warehouse_id=w and item_id=i;
if upper(b)='PAID' then
    update warehouse_items set available_qty=nvl(available_qty,0)+o where warehouse_id=w and item_id=i;
end if;
end updatewarehousestock;
/

/trigger to generate mall order/

create or replace trigger m1
after update on mall_items for each row
declare
	temp_ord_qty number;temp_r_lvl number;
begin
	select :new.available_qty,reorder_level into temp_ord_qty,temp_r_lvl from mall_items where item_id=:new.item_id and mall_id=:new.mall_id;

	if temp_ord_qty < temp_r_lvl then
        generatemallorder(:new.mall_id,:new.item_id);
    end if;
end m1; 


/prosedure to genrate wareorder/

create or replace procedure generatewareorder(w warehouse.warehouse_id%type,i item.item_id%type)
is
reorder warehouse_items.reorder_level%type;
o warehouse_bills.bill_id%type;
s warehouse_supplier_details.s_id%type;
begin
select reorder_level into reorder from warehouse_items where warehouse_id=w and item_id=i;
select max(bill_id) into o from warehouse_bills;
select max(s_id) into s from warehouse_supplier_details where warehouse_id=w and item_id=i;
o:=o+1;
insert into warehouse_bills values(o,w,i,s,reorder,sysdate,calprice(i,reorder),'PAID');
end generatewareorder;


/trigger to update warestock/

create or replace trigger t1 
after insert on warehouse_bills for each row
declare

begin
updatewarehousestock(:new.warehouse_id,:new.item_id);
end t1;
/
